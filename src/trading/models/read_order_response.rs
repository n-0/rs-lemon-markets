/*
 * lemon.markets | Trading API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: b996d5fa9acbe1796d08c2f8360172c63ac713ad
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct ReadOrderResponse {
    #[serde(rename = "id")]
    pub id: String,
    #[serde(rename = "isin")]
    pub isin: String,
    #[serde(rename = "isin_title", skip_serializing_if = "Option::is_none")]
    pub isin_title: Option<String>,
    #[serde(rename = "expires_at")]
    pub expires_at: String,
    #[serde(rename = "created_at")]
    pub created_at: String,
    #[serde(rename = "side")]
    pub side: String,
    #[serde(rename = "quantity")]
    pub quantity: u64,
    #[serde(rename = "stop_price", skip_serializing_if = "Option::is_none")]
    pub stop_price: Option<f64>,
    #[serde(rename = "limit_price", skip_serializing_if = "Option::is_none")]
    pub limit_price: Option<f64>,
    #[serde(rename = "estimated_price", skip_serializing_if = "Option::is_none")]
    pub estimated_price: Option<f64>,
    #[serde(rename = "estimated_price_total", skip_serializing_if = "Option::is_none")]
    pub estimated_price_total: Option<f64>,
    #[serde(rename = "venue")]
    pub venue: String,
    #[serde(rename = "status")]
    pub status: String,
    #[serde(rename = "type")]
    pub _type: String,
    #[serde(rename = "executed_quantity")]
    pub executed_quantity: u64,
    #[serde(rename = "executed_price")]
    pub executed_price: f64,
    #[serde(rename = "executed_price_total", skip_serializing_if = "Option::is_none")]
    pub executed_price_total: Option<f64>,
    #[serde(rename = "activated_at", skip_serializing_if = "Option::is_none")]
    pub activated_at: Option<String>,
    #[serde(rename = "executed_at", skip_serializing_if = "Option::is_none")]
    pub executed_at: Option<String>,
    #[serde(rename = "rejected_at", skip_serializing_if = "Option::is_none")]
    pub rejected_at: Option<String>,
    #[serde(rename = "cancelled_at", skip_serializing_if = "Option::is_none")]
    pub cancelled_at: Option<String>,
    #[serde(rename = "notes", skip_serializing_if = "Option::is_none")]
    pub notes: Option<String>,
    #[serde(rename = "charge", skip_serializing_if = "Option::is_none")]
    pub charge: Option<f64>,
    #[serde(rename = "chargeable_at", skip_serializing_if = "Option::is_none")]
    pub chargeable_at: Option<String>,
    #[serde(rename = "key_creation_id", skip_serializing_if = "Option::is_none")]
    pub key_creation_id: Option<String>,
    #[serde(rename = "key_activation_id", skip_serializing_if = "Option::is_none")]
    pub key_activation_id: Option<String>,
    #[serde(rename = "regulatory_information", skip_serializing_if = "Option::is_none")]
    pub regulatory_information: Option<serde_json::Value>,
    #[serde(rename = "idempotency", skip_serializing_if = "Option::is_none")]
    pub idempotency: Option<String>,
}

impl ReadOrderResponse {
    pub fn new(id: String, isin: String, expires_at: String, created_at: String, side: String, quantity: u64, venue: String, status: String, _type: String, executed_quantity: u64, executed_price: f64) -> ReadOrderResponse {
        ReadOrderResponse {
            id,
            isin,
            isin_title: None,
            expires_at,
            created_at,
            side,
            quantity,
            stop_price: None,
            limit_price: None,
            estimated_price: None,
            estimated_price_total: None,
            venue,
            status,
            _type,
            executed_quantity,
            executed_price,
            executed_price_total: None,
            activated_at: None,
            executed_at: None,
            rejected_at: None,
            cancelled_at: None,
            notes: None,
            charge: None,
            chargeable_at: None,
            key_creation_id: None,
            key_activation_id: None,
            regulatory_information: None,
            idempotency: None,
        }
    }
}


