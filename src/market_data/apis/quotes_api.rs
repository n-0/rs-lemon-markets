/*
 * lemon.markets | Historical Market Data API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1da2ed0b5fefcf155fa143ba4b81c08c3c1c351c
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;

use crate::market_data::{apis::ResponseContent};
use super::Error;
use crate::util::configuration;


/// struct for typed errors of method [`get_latest_quote_quotes_latest_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetLatestQuoteQuotesLatestGetError {
    Status400(crate::market_data::models::ResponseError),
    Status422(crate::market_data::models::ResponseError),
    Status500(crate::market_data::models::ResponseError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_quotes_quotes_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetQuotesQuotesGetError {
    Status400(crate::market_data::models::ResponseError),
    Status422(crate::market_data::models::ResponseError),
    Status500(crate::market_data::models::ResponseError),
    UnknownValue(serde_json::Value),
}


pub async fn get_latest_quote_quotes_latest_get(configuration: &configuration::Configuration, mic: Option<&str>, isin: Option<Vec<String>>, decimals: Option<bool>, epoch: Option<bool>, sorting: Option<crate::market_data::models::SortType>, limit: Option<i32>, page: Option<i32>, authorization: Option<&str>, jwt: Option<&str>, x_consumer_custom_id: Option<&str>) -> Result<crate::market_data::models::ApiEndpointsQuotesPageDict, Error<GetLatestQuoteQuotesLatestGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/quotes/latest/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = mic {
        local_var_req_builder = local_var_req_builder.query(&[("mic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = isin {
        local_var_req_builder = match "multi" {
            "multi" => local_var_req_builder.query(&local_var_str.into_iter().map(|p| ("isin".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => local_var_req_builder.query(&[("isin", &local_var_str.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref local_var_str) = decimals {
        local_var_req_builder = local_var_req_builder.query(&[("decimals", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = epoch {
        local_var_req_builder = local_var_req_builder.query(&[("epoch", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = sorting {
        local_var_req_builder = local_var_req_builder.query(&[("sorting", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = limit {
        local_var_req_builder = local_var_req_builder.query(&[("limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = page {
        local_var_req_builder = local_var_req_builder.query(&[("page", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(local_var_param_value) = authorization {
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = jwt {
        local_var_req_builder = local_var_req_builder.header("jwt", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = x_consumer_custom_id {
        local_var_req_builder = local_var_req_builder.header("x-consumer-custom-id", local_var_param_value.to_string());
    }
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetLatestQuoteQuotesLatestGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get_quotes_quotes_get(configuration: &configuration::Configuration, mic: Option<&str>, isin: Option<Vec<String>>, from: Option<String>, decimals: Option<bool>, epoch: Option<bool>, sorting: Option<crate::market_data::models::SortType>, limit: Option<i32>, page: Option<i32>, authorization: Option<&str>, jwt: Option<&str>, x_consumer_custom_id: Option<&str>) -> Result<crate::market_data::models::ApiEndpointsQuotesPageDict, Error<GetQuotesQuotesGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/quotes/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = mic {
        local_var_req_builder = local_var_req_builder.query(&[("mic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = isin {
        local_var_req_builder = match "multi" {
            "multi" => local_var_req_builder.query(&local_var_str.into_iter().map(|p| ("isin".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => local_var_req_builder.query(&[("isin", &local_var_str.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref local_var_str) = from {
        local_var_req_builder = local_var_req_builder.query(&[("from", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = decimals {
        local_var_req_builder = local_var_req_builder.query(&[("decimals", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = epoch {
        local_var_req_builder = local_var_req_builder.query(&[("epoch", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = sorting {
        local_var_req_builder = local_var_req_builder.query(&[("sorting", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = limit {
        local_var_req_builder = local_var_req_builder.query(&[("limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = page {
        local_var_req_builder = local_var_req_builder.query(&[("page", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(local_var_param_value) = authorization {
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = jwt {
        local_var_req_builder = local_var_req_builder.header("jwt", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = x_consumer_custom_id {
        local_var_req_builder = local_var_req_builder.header("x-consumer-custom-id", local_var_param_value.to_string());
    }
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        println!("{:#?}", &local_var_content);
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetQuotesQuotesGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

